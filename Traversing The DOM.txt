# TRAVERSING THE DOM
--------------------

* The DOM Tree
--------------
jQuery makes it easy to target HTML elements by tag name, class, and id. We can also dynamically target a single element in a given class by accessing an event’s .currentTarget attribute. 
In this lesson, we’ll go even further. You will learn how to target elements based on their position relative to other elements.

Before we begin, let’s review the Document Object Model or DOM. The DOM is a tree of objects based on the HTML document that is created by the browser when it loads a page. Every element 
in this page exists on some branch of the tree, with elements above it, and possibly next to or below it.

<div class='parent'>
  <div class='child' id='sibling1'>
    <p class='grandchild'></p>
  </div>
  <div class='child' id='sibling2'></div>
  <div class='child' id='sibling3'></div>
</div>

Elements inside other elements are considered descendants. We use family words to refer to these relationships. For instance, an outer <div> would be considered the parent of any <div> 
element inside it (those with class 'child' above). Any other <div>s inside of 'parent' on the same level as 'child' are considered siblings of each other. A <p> in any 'child' would 
itself be a child of the 'child' element that contains it and a grandchild of 'parent'.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Children
----------
According to the DOM tree, the outermost element is the parent of all elements inside of it. Therefore, the HTML elements inside of the outer element are children. The jQuery .children() 
method allows us to target these elements.

<div class='parent' id='holder'>
  <div>Child <span>1</span></div>
  <div>Child <span>2</span></div>
  <div>Child <span>3</span></div>
</div>

const $kids = $('#holder').children();
$kids.on('click', event => {
  $(event.currentTarget).css('border', '1px solid black');
});

In the example above, the $kids variable refers to all children of the element with id 'holder' (the divs inside '#holder'). The .on() method adds the click event handler to these $kids. 
When one of them is clicked, jQuery will add a border around it that is 1px wide and solid black.

It is important to note that only the direct descendants of '#holder' are considered children. Any elements inside the child elements of '#holder', such as the <span> elements, will not 
be targeted by the .children() method.

* Instructions
--------------
Checkpoint 1 Passed
1.
Within the click event handler on the '.shoe-details li' selector, target the children of the '.shoe-details' elements.

Use .removeClass() to remove the 'disabled' class from the targeted children.

When you select a shoe size, this jQuery activates the ADD TO CART button.


Hint
$('.example-class li').on('click', event => {
  ...
  $('.example-class').children('.another-class').removeClass('a-third-class');
});

main.js
-------
$(document).ready(() => {
  
  $('.shoe-details').show();
  
  $('.more-details-button').on('click', event => {
    
  });  
  
  $('.shoe-details li').on('click', event => {
    $(event.currentTarget).addClass('active');
    
    $(event.currentTarget).siblings().removeClass('active')
    
    $('.shoe-details').children().removeClass('disabled')
  });
  
  
  
  ///////////////////////////////////////////
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
    $('.login-button').toggleClass('button-active');
  });

  $('.product-photo').on('mouseenter', () => {
    $(this).addClass('photo-active');
  }).on('mouseleave', function() {
    $(this).removeClass('photo-active');
  });

  $('.menu-button').on('click', () => {
    $('.menu-button').toggleClass('button-active');
    $('.nav-menu').toggleClass('hide');
  });
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Parent & Siblings
-------------------
In addition to the .children() method we covered in the last exercise, there are two methods you can use to select the parent and siblings of an element.

$('.choice').on('click', event => {
  $(event.currentTarget).parent().hide();
});

In the example above, the .parent() method targets the parent element of '.choice' elements and removes it from the DOM.

$('.choice').on('click', event => {
  $(this).siblings().removeClass('selected');
  $(event.currentTarget).addClass('selected');
});

In the code above, the .siblings() method targets elements adjacent to the clicked '.choice' and removes the 'selected' class from any previously clicked '.choice's. Then the 'selected' 
class is added only to the clicked '.choice'.

* Instructions
--------------
Checkpoint 1 Passed
1.
Now, click on multiple shoe sizes for one shoe and notice that they all light up. In order to remove the active class from all of the other shoe sizes, you can utilize .siblings().

Write another selector for the shoe size selected using $(event.currentTarget). Then, select all of its siblings with .siblings().


Hint
Checkpoint 2 Passed
2.
Use the .removeClass() method to remove the active class from all of the current target’s siblings. You can chain .removeClass() directly onto the .siblings() method.

main.js
-------
$(document).ready(() => {
  
  $('.shoe-details').show();
  
  $('.more-details-button').on('click', event => {
   
  });  
  
  $('.shoe-details li').on('click', event => {
    $(event.currentTarget).addClass('active');
    $(event.currentTarget).siblings().removeClass('active')
  });
  
  
  
  ///////////////////////////////////////////
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
    $('.login-button').toggleClass('button-active');
  });

  $('.product-photo').on('mouseenter', () => {
    $(this).addClass('photo-active');
  }).on('mouseleave', function() {
    $(this).removeClass('photo-active');
  });

  $('.menu-button').on('click', () => {
    $('.menu-button').toggleClass('button-active');
    $('.nav-menu').toggleClass('hide');
  });
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Closest
---------
To select an element close to the current element, we can use jQuery’s .closest() method.

The .closest() method will travel up the DOM tree to find a specified selector closest to it. Its syntax looks like:

$('.example-class-one').closest('.another-class');

In the example above:

	. The .closest() method is called on '.example-class-one' elements.

	. The method then targets the element selected by the .closest() method with a class of '.another-class'.

<div class='.another-class'>
  <p class='.example-class-one'>1</p>
</div>
<div class='.another-class'>
  <p class='.example-class-two'>2</p>
</div>

Given this HTML, the jQuery above would select the <div> element that wraps the paragraph with a value of 1, because it is the closest element, up the DOM tree, with the class 
.another-class.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the Children exercise, you removed the 'disabled' class from all '.shoe-details' elements when a user clicked a size. When you did that, it activated the ADD TO CART button in every 
product details card.

Use the .closest() method to activate only the current product details ADD TO CART button.

Inside of the '.shoe-details li' click event handler, create a jQuery object with the current element and use .closest() to target the nearest '.shoe-details' element.


Hint
Use the example code below to help:

$('.example-class').on('click', event => {
  $(event.currentTarget).closest('.another-class');
});

Checkpoint 2 Passed
2.
Now that you’ve targeted the current '.shoe-details' card, use the .children() and .removeClass() methods to activate the current ADD TO CART button (remove the 'disabled' class).


Hint
Use the code below to help you:

$('.example-class').on('click', event => {
  $(event.currentTarget).closest('.another-class').children().removeClass('a-third-class');
});

Checkpoint 3 Passed
3.
Next, we need to use the .closest() method to target the nearest shoe details element when a user selects a .more-details-button element.

Inside the '.more-details-button' click event handler’s callback function, write another $(event.currentTarget) selector. Then, call the .closest() method on it, and find the closest 
element with a class of '.product-details'.

In the next exercise, we will chain a .next() method to this.


Hint
Use the code below to help you:

$('.example-class').on('click', event => {
  $(event.currentTarget).closest('.another-class')
});

main.js
-------
$(document).ready(() => {
  
  $('.shoe-details').show();
  
  $('.more-details-button').on('click', event => {
    $(event.currentTarget).closest('.product-details')
  });  
  
  $('.shoe-details li').on('click', event => {
    $(event.currentTarget).addClass('active');
    $(event.currentTarget).siblings().removeClass('active')
    $(event.currentTarget).closest('.shoe-details').children().removeClass('disabled')
  });cd
  
  
  
  ///////////////////////////////////////////
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
    $('.login-button').toggleClass('button-active');
  });

  $('.product-photo').on('mouseenter', () => {
    $(this).addClass('photo-active');
  }).on('mouseleave', function() {
    $(this).removeClass('photo-active');
  });

  $('.menu-button').on('click', () => {
    $('.menu-button').toggleClass('button-active');
    $('.nav-menu').toggleClass('hide');
  });
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Next
------
Sometimes you don’t want to target all the siblings of an element — you just want to target the next one. That’s where the aptly-named .next() method comes in!

The code below is HTML for a menu. The list of food types is hidden, <ol style='display:none'>.

<div class='heading'>MENU</div>
<ol style='display: none'>
  <li>Appetizers</li>
  <li>Entrees</li>
  <li>Salads</li>
  <li>Sides</li>
  <li>Desserts</li>
</ol>

Since the div and <ol> exist on the same level of the DOM, they are siblings. Since there are no elements between them, the <ol> is the next sibling of '.heading'. We can add an event 
handler to the div element and use the .next() method to show and hide the <ol> using the .toggle() method.

const $heading = $('.heading');
$heading.on('click', () => {
  $(event.currentTarget).next().toggle();
});

In the example above, the .on() method attaches the click event handler to $heading. Then the callback function will toggle the class of the $heading‘s next sibling, the ol element.

It’s important to note that jQuery also has a method called .prev() that can look at the previous sibling.

* Instructions
--------------
Checkpoint 1 Passed
1.
To get the '.shoe-details' element to display when clicking the '.more-details-button', you need to select the element next after the '.product-details' element.

In a previous exercise, you used .closest() to select '.product-details'.

Now, chain a .next() method on the .closest() method to select the '.shoe-details' element.


Hint
$('.example-class').closest('active').next();

Checkpoint 2 Passed
2.
Now that you have the '.shoe-details' selected with logical selectors, chain the .toggle() method on the .next() method you just wrote, so that when clicking the more details button, the 
'.shoe-details' section becomes visible.


Hint
Use the code below as an example:

$('.example-class').closest('active').next().toggle();

main.js
-------
$(document).ready(() => {
  
  $('.shoe-details').show();
  
  $('.more-details-button').on('click', event => {
    $(event.currentTarget).closest('.product-details').next('.shoe-details').toggle()
  });  
  
  $('.shoe-details li').on('click', event => {
    $(event.currentTarget).addClass('active');
    $(event.currentTarget).siblings().removeClass('active')
    $(event.currentTarget).closest('.shoe-details').children().removeClass('disabled')
  });cd
  
  
  
  ///////////////////////////////////////////
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
    $('.login-button').toggleClass('button-active');
  });

  $('.product-photo').on('mouseenter', () => {
    $(this).addClass('photo-active');
  }).on('mouseleave', function() {
    $(this).removeClass('photo-active');
  });

  $('.menu-button').on('click', () => {
    $('.menu-button').toggleClass('button-active');
    $('.nav-menu').toggleClass('hide');
  });
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------


























































































































































